# # Example queries for a simple movie app.

# # @auth() directives control who can call each operation.
# # Anyone should be able to list all movies, so the auth level is set to PUBLIC
# query ListMovies @auth(level: PUBLIC) {
#   movies {
#     id
#     title
#     imageUrl
#     genre
#   }
# }

# # List all users, only admins should be able to list all users, so we use NO_ACCESS
# query ListUsers @auth(level: NO_ACCESS) {
#   users { id, username }
# }

# # Logged in user can list all their reviews and movie titles associated with the review 
# # Since the query requires the uid of the current authenticated user, the auth level is set to USER
# query ListUserReviews @auth(level: USER) {
#   user(key: {id_expr: "auth.uid"}) {
#     id
#     username
#     # <field>_on_<foreign_key_field> makes it easy to grab info from another table
#     # Here, we use it to grab all the reviews written by the user.
#     reviews: reviews_on_user {
#       id
#       rating
#       reviewDate
#       reviewText
#       movie {
#         id
#         title
#       }
#     }
#   }
# }

query GetUserByEmail($keyEmail: String!) @auth(level: PUBLIC) {
    user(key: {email: $keyEmail}){
        email
        id
        username
        displayname
    }
}

# So heres the explanation on preset goals.

# The insert and update many stuff for graphQL isn't working for me, so instead here is the plan.
# We will fill up the PresetGoals table, and when a person levels up, we will query all the preset goals
# that match their level and for loop all of those into the AddUserGoal mutation to add the preset goals
# to the user profile.

# Sorry it is a lot to work around, but I am trying my best

query GetPresetGoalsByLevel($lvlReq:Int!) @auth(level: PUBLIC) {
    presetGoals(
        where: {
            lvlReq: {eq:$lvlReq}
        }
    ){
       goalType goalText goalPoints 
    }
}

query GetUncompleteUserGoals($email: String!) @auth(level: PUBLIC) { 
    dailyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "daily"}
        completed: {eq: false}
        }) {id goalType goalText goalPoints}
    weeklyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "weekly"}
        completed: {eq: false}
        }) {id goalType goalText goalPoints}
    mothlyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "monthly"}
        completed: {eq: false}
        }) {id goalType goalText goalPoints}

    }

query GetCompleteUserGoals($email: String!) @auth(level: PUBLIC) { 
    dailyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "daily"}
        completed: {eq: true}
        }) {id goalType goalText goalPoints}
    weeklyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "weekly"}
        completed: {eq: true}
        }) {id goalType goalText goalPoints}
    mothlyGoals: userGoals(
        where: {
        userEmail: {eq : $email}
        goalType: {eq: "monthly"}
        completed: {eq: true}
        }) {id goalType goalText goalPoints}

    }

query GetUserProgress($keyEmail: String!) @auth(level: PUBLIC) {
    user(key: {email: $keyEmail}){
        userProgress_on_user{
            progress
            dailyGoalsCompleted
            weeklyGoalsCompleted
            monthlyGoalsCompleted
            totalGoalsCompleted
            }
    }
}

query GetAllRecipes {
    recipes (orderBy : {calories: DESC}){
        id name type calories instructions
    }
}

query GetUserFriends($userId: UUID!) {
    friendss(where: {_or: [{user1 : {id : {eq: $userId}}}, {user2: {id: {eq: $userId}}}]}) {
        user1 {
            id
            username
        }
        user2 {
            id
            username
        }
        status
    }
}

query GetFriendActivities($userId: UUID!) {
    friendss(where: {_or: [{user1 : {id : {eq: $userId}}}, {user2: {id: {eq: $userId}}}]}) {
        user1 {
            id
        }
        user2 {
            id
        }
    }
}

# # Get movie by id
# query GetMovieById($id: UUID!) @auth(level: PUBLIC) {
#   movie(id: $id) {
#     id
#     title
#     imageUrl
#     genre
#     metadata: movieMetadata_on_movie {
#       rating
#       releaseYear
#       description
#     }
#     reviews: reviews_on_movie {
#       id
#       reviewText
#       reviewDate
#       rating
#       user {
#         id
#         username
#       }
#     }
#   }
# }

# # Search for movies, actors, and reviews
# query SearchMovie(
#   $titleInput: String
#   $genre: String
# ) @auth(level: PUBLIC) {
#   movies(
#     where: {
#       _and: [
#         { genre: { eq: $genre } }
#         { title: { contains: $titleInput } }
#       ]
#     }
#   ) {
#     id
#     title
#     genre
#     imageUrl
#   }
# }
