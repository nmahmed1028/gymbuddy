# # Example mutations for a simple movie app

# # Create a movie based on user input
# mutation CreateMovie(
#   $title: String!
#   $genre: String!
#   $imageUrl: String!
# ) @auth(level: USER_EMAIL_VERIFIED) {
#   movie_insert(
#     data: {
#       title: $title
#       genre: $genre
#       imageUrl: $imageUrl
#     }
#   )
# }

# Upsert (update or insert) a user's username based on their auth.uid
mutation UpsertUser($email: String!, $username: String!, $displayname: String) @auth(level: USER) {
  user_upsert(
    data: {
      email: $email
      id_expr: "uuidV4()"
      username: $username
      displayname: $displayname
    }
  )
}

mutation AddUserGoal($email: String!, $goalType: String!, $goalPoints: Int!, $goalText: String){
  userGoal_insert(
    data: {
      user : {email : $email}
      goalType : $goalType
      goalPoints : $goalPoints
      goalText : $goalText
      completed: false
    }
  )
}


# How to upsert progress for a given user.
# First, query for user progress using the GetUserProgress query
# Then, take those values, modify them by adding the xp total, incrementing the goals, etc.
# Finally, call this mutation again with the updated values

mutation UpsertProgress($email: String!, $progress: Int, $dailyGoalsCompleted: Int, $weeklyGoalsCompleted: Int, $monthlyGoalsCompleted: Int, $totalGoalsCompleted: Int){
  userProgress_upsert(
    data:{
      user : {email: $email}
      progress: $progress
      dailyGoalsCompleted: $dailyGoalsCompleted
      weeklyGoalsCompleted: $weeklyGoalsCompleted
      monthlyGoalsCompleted: $monthlyGoalsCompleted
      totalGoalsCompleted: $totalGoalsCompleted
    }
  )
}

mutation AddFriend($userEmail: String!, $friendEmail: String!) {
  friends_insert(
    data :{
    user1 : {email: $userEmail}
    user2 : {email: $friendEmail}
    }
  )
}

mutation AcceptFriendRequest($userEmail: String!, $friendEmail: String!) {
  friends_update(key: {user1Email: $userEmail user2Email: $friendEmail}
    data:{
      status: "accepted"
    }
  )
}

# # Add a review for a movie
# mutation AddReview(
#   $movieId: UUID!
#   $rating: Int!
#   $reviewText: String!
# ) @auth(level: USER) {
#   review_upsert(
#     data: {
#       userId_expr: "auth.uid"
#       movieId: $movieId
#       rating: $rating
#       reviewText: $reviewText
#       # reviewDate defaults to today in the schema. No need to set it manually.
#     }
#   )
# }

# # Logged in user can delete their review for a movie
# mutation DeleteReview(
#   $movieId: UUID!
# ) @auth(level: USER) {
#   review_delete(key: { userId_expr: "auth.uid", movieId: $movieId })
# }